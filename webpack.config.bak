var path = require("path");
var webpack = require("webpack");
var ngwebpack = require("@ngtools/webpack");
ExtractTextPlugin = require("extract-text-webpack-plugin");
var CopyWebpackPlugin = require("copy-webpack-plugin");
var HtmlWebpackPlugin = require("html-webpack-plugin");
const SubresourceIntegrityPlugin = require("webpack-subresource-integrity");

var ENV = (process.env.ENV = "development");
var HOST = process.env.HOST || "localhost";
var PORT = process.env.PORT || 8080;

var metadata = {
  host: HOST,
  port: PORT,
  ENV: ENV
};

/*
 * config
 */
module.exports = {
  // static data for index.html
  //metadata: metadata,

  // Emit SourceMap to enhance debugging
  devtool: "source-map",

  // devServer: {
  //   // This is required for webpack-dev-server. The path should
  //   // be an absolute path to your build destination.
  //   outputPath: path.join(__dirname, 'dist')
  // },

  // Switch loaders to debug mode
  //debug: true,

  node: false,
  // Our angular app
  entry: {
    polyfills: path.resolve(__dirname, "src/polyfills.ts"),
    app: path.resolve(__dirname, "src/main.ts")
  },

  // Config for our build file
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "[name].bundle.js",
    crossOriginLoading: "anonymous"
    //sourcemapFilename: '[name].map'
  },

  resolve: {
    // Add `.ts` and `.tsx` as a resolvable extension.
    extensions: [".ts", ".js"],
    mainFields: ["es2015", "browser", "module", "main"],
    //modules: ["node_modules", nodeModules]
    modules: ["node_modules"]
  },

  resolveLoader: {
    //modules: [nodeModules, "node_modules"]
    modules: ["node_modules"]
  },

  node: {
    fs: "empty",
    global: true,
    crypto: "empty",
    tls: "empty",
    net: "empty",
    process: true,
    module: false,
    clearImmediate: false,
    setImmediate: false
  },

  module: {
    rules: [
      { test: /\.css$/, use: [] },
      {
        test: /\.scss$|\.sass$/,
        use: [
          {
            loader: "sass-loader",
            options: {
              //sourceMap: cssSourceMap,
              // bootstrap-sass requires a minimum precision of 8
              precision: 8
              //includePaths
            }
          }
        ]
      },
      {
        test: /\.less$/,
        use: [
          {
            loader: "less-loader"
            // options: {
            //   sourceMap: cssSourceMap,
            //   ...lessPathOptions
            // }
          }
        ]
      },
      {
        test: /\.styl$/,
        use: [
          {
            loader: "stylus-loader"
            // options: {
            //   sourceMap: cssSourceMap,
            //   paths: includePaths
            // }
          }
        ]
      },
      // Support for .ts files
      {
        test: /\.tsx?$/,
        loader: "@ngtools/webpack",
        include: [path.resolve(__dirname, "./src")]
      },
      // Support for .html as raw text
      {
        test: /\.html$/,
        loader: "raw-loader",
        exclude: [path.resolve(__dirname, "src/index.html")]
      }
    ]
  },

  plugins: [
    new webpack.NoEmitOnErrorsPlugin(),
    new HtmlWebpackPlugin({
      filename: "./src/index.html",
      xhtml: true,
      minify: false
    }),
    new webpack.optimize.CommonsChunkPlugin({
      minChunks: Infinity,
      name: "inline"
    }),
    // new SubresourceIntegrityPlugin({
    //   hashFuncNames: ["sha384"]
    // }),
    new ngwebpack.AngularCompilerPlugin({
      mainPath: "./src/main.ts",
      tsConfigPath: "./tsconfig.json",
      platform: ngwebpack.PLATFORM.Browser,
      skipCodeGeneration: false,
      replaceExport: false
    }),

    // new ExtractTextPlugin({
    //   filename: `[name]${hashFormat.extract}.bundle.css`
    // }),
    new webpack.NamedModulesPlugin()
    // // Copy static assets to the build folder
    // new CopyWebpackPlugin([{ from: "src/assets", to: "assets" }]),
    // // Generate the index.html
    // new HtmlWebpackPlugin({ template: "src/index.html" })
  ]
};
